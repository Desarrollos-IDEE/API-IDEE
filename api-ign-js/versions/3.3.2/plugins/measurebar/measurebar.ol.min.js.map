{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/templates/measure_pointer_tooltip.html","webpack:///./src/templates/measure_tooltip.html","webpack:///./src/templates/measurearea.html","webpack:///./src/templates/measurelength.html","webpack:///./src/templates/measureclear.html","webpack:///./src/facade/js/i18n/language.js","webpack:///./src/facade/js/measurebase.js","webpack:///./src/impl/ol/js/measurebase.js","webpack:///./src/impl/ol/js/measurearea.js","webpack:///./src/facade/js/measurearea.js","webpack:///./src/impl/ol/js/measurelength.js","webpack:///./src/facade/js/measurelength.js","webpack:///./src/impl/ol/js/measureclear.js","webpack:///./src/facade/js/measureclear.js","webpack:///./src/facade/js/measurebar.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","translations","en","es","getLang","res","M","language","getTranslation","lang","getValue","keyPath","translation","utils","isNullOrEmpty","console","warn","split","reduce","prev","current","Measure","impl","template","template_","Control","map","compileSync","this","jsonp","vars","element","querySelector","obj","equals","getImpl","destroy","NAME","POINTER_TOOLTIP_TEMPLATE","MEASURE_TOOLTIP_TEMPLATE","HELP_MESSAGE","type","type_","layer_","createLayer_","draw_","createIteractionDraw_","helpTooltip_","measureTooltip_","facadeMap_","currentFeature_","tooltipCoord_","overlays_","getMapImpl","addLayer","createHelpTooltip_","createMeasureTooltip_","on","pointerMoveHandler_","addInteraction","active","document","addEventListener","checkEscKey","evt","querySelectorAll","forEach","elem","click","removeEventListener","un","removeInteraction","removeOverlay","ol","layer","Vector","source","style","Style","fill","Fill","color","stroke","Stroke","width","image","Circle","radius","zIndex","draw","interaction","Draw","getSource","lineDash","onDrawStart_","onDrawEnd_","helpTooltipElement","tooltipPointerHTML","Overlay","offset","positioning","addOverlay","measureTooltipElement","tooltipHTML","push","feature","coordinate","getGeometry","onGeometryChange_","getElement","classList","add","setOffset","dragging","helpMsg","helpMsg_","helpMsgContinue_","innerHTML","setPosition","newGeometry","target","tooltipText","formatGeometry","tooltipCoord","getTooltipCoordinate","clear","overlay","length","deactivate","remove","removeControls","MeasureArea","FacadeMeasure","HELP_KEEP_MESSAGE","MeasureImpl","geometry","area","output","projection","getProjection","sphere","getArea","code","formatNumber","Math","round","getInteriorPoint","getCoordinates","measureLength","getControls","filter","control","FacadeMeasureLength","number","replace","join","MeasureAreaImpl","measureareaHTML","isUndefined","Exception","TEMPLATE","MeasureLength","codeProj","unitsProj","units","getLength","coordinates","ii","getDistance","proj","transform","getLastCoordinate","measureArea","FacadeMeasureArea","MeasureLengthImpl","measurelengthHTML","MeasureClear","measureLengthControl","measureAreaControl","measureLengthControl_","measureAreaControl_","onClick","addControl","deactivateOtherBtns","MeasureClearImpl","measureclearHTML","MeasureBar","options","map_","controls_","position_","position","measureLength_","measureArea_","measureClear_","Plugin","panel_","ui","Panel","collapsible","className","collapsedButtonClass","tooltip","addControls","addPanels","aControls","plugin","window","M$plugin$MeasureBar"],"mappings":"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","file":"measurebar.ol.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","module.exports = \"<div class=\\\"m-measure-tooltip pointer\\\"></div>\";","module.exports = \"<div class=\\\"m-measure-tooltip measure\\\">Area: {{area}}</div>\";","module.exports = \"<div class=\\\"m-control m-measurearea-container\\\">\\n    <button id=\\\"measurebar-area-btn\\\" class=\\\"measurebar-medir-area\\\" title=\\\"{{translations.measure_area}}\\\"></button>\\n</div>\\n\";","module.exports = \"<div class=\\\"m-control m-measurelength-container\\\">\\n    <button id=\\\"measurebar-length-btn\\\" class=\\\"measurebar-medir-linea\\\" title=\\\"{{translations.measure}}\\\"></button>\\n</div>\\n\";","module.exports = \"<div class=\\\"m-control m-measureclear-container\\\">\\n    <button id=\\\"measurebar-clear-btn\\\" class=\\\"g-cartografia-papelera\\\" title=\\\"{{translations.delete}}\\\"></button>\\n</div>\\n\";","import en from './en';\nimport es from './es';\n\n/**\n * Default object with es and en translate.\n *\n * @const\n * @type {object}\n */\nconst translations = {\n  en,\n  es,\n};\n\nconst getLang = () => {\n  let res = 'es';\n  if (typeof M.language.getLang === 'function') {\n    res = M.language.getLang();\n  }\n\n  return res;\n};\n\n/**\n * This function sets a new language translate.\n * @param {string} lang\n * @param {JSON} json\n * @public\n * @api\n */\nexport const addTranslation = (lang, json) => {\n  translations[lang] = json;\n};\n\n/**\n * This function gets a language translate.\n *\n * @param {string} lang\n * @return {JSON}\n * @public\n * @api\n */\nexport const getTranslation = (lang) => {\n  return translations[lang];\n};\n\n/**\n * This function gets a language value from key\n *\n * @public\n * @param {string}\n * @param {string}\n * @return {string}\n * @public\n * @api\n */\n\nexport const getValue = (keyPath, lang = getLang()) => {\n  const translation = getTranslation(lang);\n  let value = '';\n  if (M.utils.isNullOrEmpty(translation)) {\n    /* eslint-disable no-console */\n    console.warn(`The translation '${lang}' has not been defined.`);\n  } else {\n    value = keyPath.split('.').reduce((prev, current) => prev[current], translation);\n  }\n\n  return value;\n};\n","import { getValue } from './i18n/language';\n\nexport default class Measure extends M.Control {\n  /**\n   * @classdesc\n   * Main constructor of the class. Creates a Measure\n   * control to provides measure tools\n   *\n   * @constructor\n   * @extends {M.Control}\n   * @api stable\n   */\n  constructor(impl, template, name) {\n    super(impl, name);\n\n    /**\n     * Template of the control\n     * @private\n     * @type {string}\n     */\n\n    this.template_ = template;\n  }\n\n  /**\n   * This function creates the view to the specified map\n   *\n   * @public\n   * @function\n   * @param {M.Map} map - Map to add the control\n   * @returns {HTMLElement} HTML template\n   * @api stable\n   */\n  createView(map) {\n    return M.template.compileSync(this.template_, {\n      jsonp: true,\n      vars: {\n        translations: getValue('text'),\n      },\n    });\n  }\n\n  /**\n   * This function returns the HTML control button\n   *\n   * @public\n   * @function\n   * @param {HTMLElement} html to add the plugin\n   * @api stable\n   * @export\n   */\n  getActivationButton(element) {\n    return element.querySelector('button'); // button#m-measure-button\n  }\n\n  /**\n   * This function checks if an object is equals\n   * to this control\n   *\n   * @public\n   * @function\n   * @param {*} obj - Object to compare\n   * @returns {boolean} equals - Returns if they are equal or not\n   * @api stable\n   */\n  equals(obj) {\n    let equals = false;\n    if (obj instanceof Measure) {\n      equals = (this.name === obj.name);\n    }\n    return equals;\n  }\n\n  /**\n   * This function destroys this plugin\n   *\n   * @public\n   * @function\n   * @api stable\n   */\n  destroy() {\n    this.getImpl().destroy();\n    this.template_ = null;\n    this.impl = null;\n  }\n}\n/**\n * Name to identify this control\n * @const\n * @type {string}\n * @public\n * @api stable\n */\nMeasure.NAME = 'measurebar';\n\n/**\n * Template for this controls\n * @const\n * @type {string}\n * @public\n * @api stable\n */\nMeasure.POINTER_TOOLTIP_TEMPLATE = 'measure_pointer_tooltip.html';\n\n/**\n * Template for this controls\n * @const\n * @type {string}\n * @public\n * @api stable\n */\nMeasure.MEASURE_TOOLTIP_TEMPLATE = 'measure_tooltip.html';\n\n/**\n * Help message\n * @const\n * @type {string}\n * @public\n * @api stable\n */\nMeasure.HELP_MESSAGE = getValue('text.click_draw');\n","import tooltipPointerHTML from '../../../templates/measure_pointer_tooltip';\nimport tooltipHTML from '../../../templates/measure_tooltip';\nimport { getValue } from '../../../facade/js/i18n/language';\n\n/**\n * @classdesc\n * Main constructor of the measure control.\n *\n * @constructor\n * @param {string} type - Type of the measure geometry\n * @extends {M.impl.Control}\n * @api stable\n */\nexport default class Measure extends M.impl.Control {\n  constructor(type) {\n    super();\n\n    /**\n     * Type of the measure geometry\n     * @private\n     * @type {string}\n     */\n    this.type_ = type;\n\n    /**\n     * Vector layer to draw the measures\n     * @private\n     * @type {ol.layer.Vector}\n     */\n    this.layer_ = this.createLayer_();\n\n    /**\n     * Map interaction\n     * @private\n     * @type {ol.interaction.Draw}\n     */\n    this.draw_ = this.createIteractionDraw_();\n\n    /**\n     * Overlay to show the help messages\n     * @private\n     * @type {ol.Overlay}\n     */\n    this.helpTooltip_ = null;\n\n    /**\n     * The measure tooltip element\n     * @private\n     * @type {ol.Overlay}\n     */\n    this.measureTooltip_ = null;\n\n    /**\n     * Facade of the map\n     * @private\n     * @type {M.Map}\n     */\n    this.facadeMap_ = null;\n\n    /**\n     * Currently drawn feature.\n     * @private\n     * @type {ol.Feature}\n     */\n    this.currentFeature_ = null;\n\n    /**\n     * Currently drawn feature coordinate.\n     * @private\n     * @type {ol.Coordinate}\n     */\n    this.tooltipCoord_ = null;\n\n    /**\n     * Currently drawn feature coordinate.\n     * @private\n     * @type {array<ol.Overlay>}\n     */\n    this.overlays_ = [];\n  }\n\n  /**\n   * This function adds the control to the specified map\n   *\n   * @public\n   * @function\n   * @param {M.Map} map - Map to add the plugin\n   * @param {HTMLElement} element - template of this control\n   * @api stable\n   */\n  addTo(map, element) {\n    this.facadeMap_ = map;\n\n    // adds layer\n    map.getMapImpl().addLayer(this.layer_);\n\n    // super addTo\n    super.addTo(map, element);\n\n    this.createHelpTooltip_();\n    this.createMeasureTooltip_();\n  }\n\n  /**\n   * This function enables plugin pressed\n   *\n   * @public\n   * @function\n   * @api stable\n   */\n  activate() {\n    this.createHelpTooltip_();\n    this.facadeMap_.getMapImpl().on('pointermove', this.pointerMoveHandler_.bind(this));\n    this.facadeMap_.getMapImpl().addInteraction(this.draw_);\n    this.active = true;\n\n    this.createMeasureTooltip_();\n    document.addEventListener('keydown', this.checkEscKey.bind(this));\n  }\n\n  checkEscKey(evt) {\n    if (evt.key === 'Escape') {\n      document.querySelectorAll('.m-panel.m-panel-measurebar .m-panel-controls div.activated > button').forEach((elem) => {\n        elem.click();\n      });\n\n      document.removeEventListener('keydown', this.checkEscKey);\n    }\n  }\n\n  /**\n   * This function dissable plugin\n   *\n   * @public\n   * @function\n   * @api stable\n   */\n  deactivate() {\n    this.facadeMap_.getMapImpl().un('pointermove', this.pointerMoveHandler_.bind(this));\n    this.facadeMap_.getMapImpl().removeInteraction(this.draw_);\n    // this.clear();\n    if (!M.utils.isNullOrEmpty(this.helpTooltip_)) {\n      this.facadeMap_.getMapImpl().removeOverlay(this.helpTooltip_);\n    }\n    if (!M.utils.isNullOrEmpty(this.measureTooltip_)) {\n      this.facadeMap_.getMapImpl().removeOverlay(this.measureTooltip_);\n    }\n    this.active = false;\n  }\n\n  /**\n   * This function create Vector layer to draw the measures\n   *\n   * @function\n   * @private\n   * @return {ol.layer.Vector} layer - Vector layer\n   */\n  createLayer_() {\n    const layer = new ol.layer.Vector({\n      source: new ol.source.Vector({}),\n      style: new ol.style.Style({\n        fill: new ol.style.Fill({\n          color: 'rgba(51, 124, 235, 0.2)',\n        }),\n        stroke: new ol.style.Stroke({\n          color: '#337ceb',\n          width: 2,\n        }),\n        image: new ol.style.Circle({\n          radius: 7,\n          fill: new ol.style.Fill({\n            color: '#337ceb',\n          }),\n        }),\n      }),\n      zIndex: 9999999999999,\n    });\n    return layer;\n  }\n\n  /**\n   * This function create interaction draw\n   *\n   * @private\n   * @function\n   * @return {ol.interaction.Draw} draw - Interaction draw\n   */\n  createIteractionDraw_() {\n    const draw = new ol.interaction.Draw({\n      source: this.layer_.getSource(),\n      type: this.type_,\n      style: new ol.style.Style({\n        fill: new ol.style.Fill({\n          color: 'rgba(255, 255, 255, 0.5)',\n        }),\n        stroke: new ol.style.Stroke({\n          color: '#b54d01',\n          lineDash: [10, 10],\n          width: 2,\n        }),\n        image: new ol.style.Circle({\n          radius: 5,\n          stroke: new ol.style.Stroke({\n            color: '#b54d01',\n          }),\n          fill: new ol.style.Fill({\n            color: 'rgba(255, 255, 255, 0.5)',\n          }),\n        }),\n      }),\n    });\n    draw.on('drawstart', this.onDrawStart_.bind(this));\n    draw.on('drawend', this.onDrawEnd_.bind(this));\n\n    return draw;\n  }\n\n  /**\n   * This function create tooltip with the help\n   *\n   * @private\n   * @function\n   * @return {Promise} Template tooltip\n   */\n  createHelpTooltip_() {\n    const helpTooltipElement = M.template.compileSync(tooltipPointerHTML, {\n      jsonp: true,\n      vars: {\n        translations: getValue('text'),\n      },\n    });\n\n    this.helpTooltip_ = new ol.Overlay({\n      element: helpTooltipElement,\n      offset: [15, 0],\n      positioning: 'center-left',\n    });\n    this.facadeMap_.getMapImpl().addOverlay(this.helpTooltip_);\n  }\n\n  /**\n   * This function create Measure tooltip\n   *\n   * @private\n   * @function\n   */\n  createMeasureTooltip_() {\n    const measureTooltipElement = M.template.compileSync(tooltipHTML, {\n      jsonp: true,\n      vars: {\n        translations: getValue('text'),\n      },\n    });\n\n    if (!M.utils.isNullOrEmpty(this.measureTooltip_)) {\n      this.overlays_.push(this.measureTooltip_);\n    }\n    this.measureTooltip_ = new ol.Overlay({\n      element: measureTooltipElement,\n      offset: [0, -15],\n      positioning: 'bottom-center',\n    });\n    this.facadeMap_.getMapImpl().addOverlay(this.measureTooltip_);\n  }\n\n  /**\n   * This function allows start to draw\n   * @private\n   * @function\n   * @param {goog.events.Event} evt - Event draw start\n   */\n  onDrawStart_(evt) {\n    this.currentFeature_ = evt.feature;\n    this.tooltipCoord_ = evt.coordinate;\n    this.currentFeature_.getGeometry().on('change', this.onGeometryChange_.bind(this));\n  }\n\n  /**\n   * This function allows end to draw\n   *\n   * @private\n   * @function\n   * @param {goog.events.Event} evt - Event draw end\n   */\n  onDrawEnd_(evt) {\n    this.currentFeature_.getGeometry().un('change', this.onGeometryChange_);\n\n    // unset sketch\n    this.currentFeature_ = null;\n    this.measureTooltip_.getElement().classList.add('static');\n    this.measureTooltip_.setOffset([0, -7]);\n\n    this.createMeasureTooltip_();\n  }\n\n  /**\n   * Handle pointer move.\n   *\n   * private\n   * function\n   * @param {ol.MapBrowserEvent} evt - Event pointer move\n   */\n  pointerMoveHandler_(evt) {\n    if (evt.dragging) {\n      return;\n    }\n    let helpMsg = this.helpMsg_;\n    if (this.currentFeature_) {\n      helpMsg = this.helpMsgContinue_;\n    }\n    if (!M.utils.isNullOrEmpty(this.helpTooltip_)) {\n      this.helpTooltip_.getElement().innerHTML = helpMsg;\n      this.helpTooltip_.setPosition(evt.coordinate);\n    }\n  }\n\n  /**\n   * Handle pointer move.\n   * private\n   * function\n   * @param {ol.MapBrowserEvent} evt - Event pointer change\n   */\n  onGeometryChange_(evt) {\n    const newGeometry = evt.target;\n    const tooltipText = this.formatGeometry(newGeometry);\n    const tooltipCoord = this.getTooltipCoordinate(newGeometry);\n\n    if (!M.utils.isNullOrEmpty(this.measureTooltip_)) {\n      this.measureTooltip_.getElement().innerHTML = tooltipText;\n      this.measureTooltip_.setPosition(tooltipCoord);\n    }\n  }\n\n  /**\n   * Clear all measures\n   *\n   * @public\n   * @function\n   * @api stable\n   */\n  clear() {\n    if (!M.utils.isNullOrEmpty(this.layer_)) {\n      this.layer_.getSource().clear();\n    }\n    this.overlays_.forEach((overlay) => {\n      this.facadeMap_.getMapImpl().removeOverlay(overlay);\n    }, this);\n    this.overlays_.length = 0;\n  }\n\n\n  /**\n   * This function destroys this control and cleaning the HTML\n   *\n   * @public\n   * @function\n   * @api stable\n   */\n  destroy() {\n    this.deactivate();\n    this.element.remove();\n    this.facadeMap_.removeControls(this);\n    this.facadeMap_ = null;\n    this.overlays_.length = 0;\n  }\n}\n","import { HELP_KEEP_MESSAGE } from '../../../facade/js/measurearea';\n\nimport FacadeMeasure from '../../../facade/js/measurebase';\nimport FacadeMeasureLength from '../../../facade/js/measurelength';\nimport MeasureImpl from './measurebase';\n\n/**\n * @classdesc\n * Main constructor of the class. Creates a MeasureArea\n * control\n *\n * @constructor\n * @extends {M.impl.control.Measure}\n * @api stable\n */\nexport default class MeasureArea extends MeasureImpl {\n  constructor() {\n    super('Polygon');\n    /**\n     * Help message\n     * @private\n     * @type {string}\n     */\n    this.helpMsg_ = FacadeMeasure.HELP_MESSAGE;\n\n    /**\n     * Help message\n     * @private\n     * @type {string}\n     */\n    this.helpMsgContinue_ = HELP_KEEP_MESSAGE;\n  }\n\n  /**\n   * This function add tooltip with extent of the area\n   * @public\n   * @param {ol.geom.SimpleGeometry} geometry - Object geometry\n   * @return {string} output - Indicate the extent of the area\n   * @api stable\n   */\n  formatGeometry(geometry) {\n    let area = null;\n    const projection = this.facadeMap_.getProjection();\n    area = ol.sphere.getArea(geometry, { projection: projection.code });\n    let output;\n    if (area <= 10000) {\n      output = `${this.formatNumber(Math.round(area * 100) / 100)} m<sup>2</sup>`;\n    } else if (area > 10000 && area <= 1000000) {\n      output = `${this.formatNumber((Math.round((area / 10000) * 10000) / 10000))} ha`;\n    } else if (area > 1000000) {\n      output = `${this.formatNumber((Math.round((area / 1000000) * 10000) / 10000))} km<sup>2</sup>`;\n    }\n\n    return output;\n  }\n\n  /**\n   * This function returns coordinates to tooltip\n   * @public\n   * @param {ol.geom.Geometry} geometry - Object geometry\n   * @return {array} coordinates to tooltip\n   * @api stable\n   */\n  getTooltipCoordinate(geometry) {\n    return geometry.getInteriorPoint().getCoordinates();\n  }\n\n  activate() {\n    const measureLength = this.facadeMap_.getControls().filter((control) => {\n      return (control instanceof FacadeMeasureLength);\n    })[0];\n\n    if (measureLength) {\n      measureLength.deactivate();\n    }\n\n    super.activate();\n  }\n\n  /* eslint-disable newline-per-chained-call */\n  formatNumber(number) {\n    return `${number}`.replace(/\\d(?=(\\d{3})+\\.)/g, '$&*').split('.').join(',').split('*').join('.');\n  }\n}\n","import Measure from './measurebase';\nimport MeasureAreaImpl from '../../impl/ol/js/measurearea';\nimport measureareaHTML from '../../templates/measurearea';\nimport { getValue } from './i18n/language';\n\nexport default class MeasureArea extends Measure {\n  constructor() {\n    // implementation of this control\n    const impl = new MeasureAreaImpl();\n\n    // const calls the super constructor\n    super(impl, measureareaHTML, MeasureArea.NAME);\n\n    // checks if the implementation can create WMC layers\n    if (M.utils.isUndefined(MeasureAreaImpl)) {\n      M.Exception(getValue('exception.impl_area'));\n    }\n  }\n  /**\n   * This function checks if an object is equals\n   * to this control\n   *\n   * @public\n   * @function\n   * @param {*} obj - Object to compare\n   * @returns {boolean} equals - Returns if they are equal or not\n   * @api stable\n   */\n  equals(obj) {\n    let equals = false;\n    if (obj instanceof MeasureArea) {\n      equals = (this.name === obj.name);\n    }\n    return equals;\n  }\n}\n\n/**\n * Name for this controls\n * @const\n * @type {string}\n * @public\n * @api stable\n */\nMeasureArea.NAME = 'measurearea';\n\n/**\n * Template for this controls\n * @const\n * @type {string}\n * @public\n * @api stable\n */\n\nMeasureArea.TEMPLATE = 'measurearea.html';\n\n/**\n * Help message\n * @const\n * @type {string}\n * @public\n * @api stable\n */\nexport const HELP_KEEP_MESSAGE = getValue('text.keep_drawing_area');\n","import { HELP_KEEP_MESSAGE } from '../../../facade/js/measurelength';\n\nimport Measure from './measurebase';\nimport FacadeMeasure from '../../../facade/js/measurebase';\nimport FacadeMeasureArea from '../../../facade/js/measurearea';\n\n/**\n * @classdesc\n * Main constructor of the class. Creates a MeasureLength\n * control\n *\n * @constructor\n * @extends {M.impl.control.Measure}\n * @api stable\n */\nexport default class MeasureLength extends Measure {\n  constructor() {\n    super('LineString');\n\n    /**\n     * Help message\n     * @private\n     * @type {string}\n     */\n    this.helpMsg_ = FacadeMeasure.HELP_MESSAGE;\n\n    /**\n     * Help message\n     * @private\n     * @type {string}\n     */\n    this.helpMsgContinue_ = HELP_KEEP_MESSAGE;\n  }\n\n\n  /**\n   * This function add tooltip with measure distance\n   * @public\n   * @param {ol.geom.SimpleGeometry} geometry - Object geometry\n   * @return {string} output - Indicates the measure distance\n   * @api stable\n   */\n  formatGeometry(geometry) {\n    let length = null;\n    const codeProj = this.facadeMap_.getProjection().code;\n    const unitsProj = this.facadeMap_.getProjection().units;\n    if (codeProj === 'EPSG:3857') {\n      length = Math.round(ol.sphere.getLength(geometry) * 100) / 100;\n    } else if (unitsProj === 'd') {\n      const coordinates = geometry.getCoordinates();\n      for (let i = 0, ii = coordinates.length - 1; i < ii; i += 1) {\n        length += ol.sphere.getDistance(ol.proj.transform(coordinates[i], codeProj, 'EPSG:4326'), ol.proj.transform(coordinates[i + 1], codeProj, 'EPSG:4326'));\n      }\n    } else {\n      length = Math.round(geometry.getLength() * 100) / 100;\n    }\n    let output;\n    if (length > 1000) {\n      output = `${this.formatNumber(Math.round(((length / 1000) * 100)) / 100)} km`;\n    } else {\n      output = `${this.formatNumber(Math.round(length * 100) / 100)} m`;\n    }\n    return output;\n  }\n\n  /**\n   * This function returns coordinates to tooltip\n   * @public\n   * @param {ol.geom.SimpleGeometry} geometry - Object geometry\n   * @return {array} coordinates to tooltip\n   * @api stable\n   */\n  getTooltipCoordinate(geometry) {\n    return geometry.getLastCoordinate();\n  }\n\n  activate() {\n    const measureArea = this.facadeMap_.getControls().filter((control) => {\n      return (control instanceof FacadeMeasureArea);\n    })[0];\n    if (measureArea) {\n      measureArea.deactivate();\n    }\n    super.activate();\n  }\n\n  /* eslint-disable newline-per-chained-call */\n  formatNumber(number) {\n    return `${number}`.replace(/\\d(?=(\\d{3})+\\.)/g, '$&*').split('.').join(',').split('*').join('.');\n  }\n}\n","import Measure from './measurebase';\nimport MeasureLengthImpl from '../../impl/ol/js/measurelength';\nimport measurelengthHTML from '../../templates/measurelength';\nimport { getValue } from './i18n/language';\n\n/**\n * @classdesc\n * Main constructor of the class. Creates a MeasureLength\n * control to provides measure distances\n *\n * @constructor\n * @extends {M.control.Measure}\n * @api stable\n */\n\nexport default class MeasureLength extends Measure {\n  constructor() {\n    // implementation of this control\n    const impl = new MeasureLengthImpl();\n\n    // calls the super constructor\n    super(impl, measurelengthHTML, MeasureLength.NAME);\n\n    // checks if the implementation can create WMC layers\n    if (M.utils.isUndefined(MeasureLengthImpl)) {\n      M.Exception(getValue('exception.impl_length'));\n    }\n  }\n\n  /**\n   * This function checks if an object is equals\n   * to this control\n   *\n   * @public\n   * @function\n   * @param {*} obj - Object to compare\n   * @returns {boolean} equals - Returns if they are equal or not\n   * @api stable\n   */\n  equals(obj) {\n    let equals = false;\n    if (obj instanceof MeasureLength) {\n      equals = (this.name === obj.name);\n    }\n    return equals;\n  }\n}\n/**\n * Name for this controls\n * @const\n * @type {string}\n * @public\n * @api stable\n */\nMeasureLength.NAME = 'measurelength';\n\n/**\n * Template for this controls\n * @const\n * @type {string}\n * @public\n * @api stable\n */\nMeasureLength.TEMPLATE = 'measurelength.html';\n\n/**\n * Help message\n * @const\n * @type {string}\n * @public\n * @api stable\n */\nexport const HELP_KEEP_MESSAGE = getValue('text.keep_drawing');\n","import FacadeMeasureArea from '../../../facade/js/measurearea';\nimport FacadeMeasureLength from '../../../facade/js/measurelength';\n\n/**\n * @classdesc\n * Main constructor of the class. Creates a MeasureClear\n * control\n *\n * @constructor\n * @extends {M.impl.Control}\n * @api stable\n */\nexport default class MeasureClear extends M.impl.Control {\n  constructor(measureLengthControl, measureAreaControl) {\n    super();\n\n    /**\n     * Implementation measureLength\n     * @private\n     * @type {M.impl.control.Measure}\n     */\n    this.measureLengthControl_ = measureLengthControl;\n\n    /**\n     * Facade of the map\n     * @private\n     * @type {M.Map}\n     */\n    this.facadeMap_ = null;\n\n    /**\n     * Implementation measureArea\n     * @private\n     * @type {M.impl.control.Measure}\n     */\n    this.measureAreaControl_ = measureAreaControl;\n  }\n\n  /**\n   * This function adds the control to the specified map\n   *\n   * @public\n   * @function\n   * @param {M.Map} map - Map to add the plugin\n   * @param {HTMLElement} element - Container MeasureClear\n   * @api stable\n   */\n  addTo(map, element) {\n    this.facadeMap_ = map;\n    const button = element.querySelector('#measurebar-clear-btn');\n    button.addEventListener('click', this.onClick.bind(this));\n    ol.control.Control.call(this, {\n      element,\n      target: null,\n    });\n    map.getMapImpl().addControl(this);\n  }\n\n  /**\n   * This function remove items drawn on the map\n   *\n   * @public\n   * @function\n   * @api stable\n   */\n  onClick() {\n    this.measureLengthControl_.clear();\n    this.measureAreaControl_.clear();\n    this.deactivateOtherBtns();\n  }\n\n  /**\n   * Deactivates length measure and area measure buttons.\n   * @public\n   * @function\n   * @api\n   */\n  deactivateOtherBtns() {\n    const measureLength = this.facadeMap_.getControls().filter((control) => {\n      return (control instanceof FacadeMeasureLength);\n    })[0];\n\n    if (measureLength) {\n      measureLength.deactivate();\n    }\n    const measureArea = this.facadeMap_.getControls().filter((control) => {\n      return (control instanceof FacadeMeasureArea);\n    })[0];\n    if (measureArea) {\n      measureArea.deactivate();\n    }\n  }\n\n  /**\n   * This function destroys this control and cleaning the HTML\n   *\n   * @public\n   * @function\n   * @api stable\n   */\n  destroy() {\n    this.element.remove();\n    this.facadeMap_.removeControls(this);\n    this.facadeMap_ = null;\n  }\n}\n","import MeasureClearImpl from '../../impl/ol/js/measureclear';\nimport measureclearHTML from '../../templates/measureclear';\nimport { getValue } from './i18n/language';\n\n/**\n * @classdesc\n * Main constructor of the class. Creates a MeasureClear\n * control to provides clean items drawn on the map\n *\n * @constructor\n * @param {M.control.Measure} measureLengthControl - Control measure distances\n * @param {M.control.Measure} measureAreaControl - Control measure areas\n * @extends {M.Control}\n * @api stable\n */\n\nexport default class MeasureClear extends M.Control {\n  constructor(measureLengthControl, measureAreaControl) {\n    // implementation of this control\n    const impl = new MeasureClearImpl(measureLengthControl.getImpl(), measureAreaControl.getImpl());\n\n    // calls the super constructor\n    super(impl, MeasureClear.NAME);\n\n    // checks if the implementation can create MeasureClear\n    if (M.utils.isUndefined(MeasureClearImpl)) {\n      M.Exception(getValue('exception.impl_clear'));\n    }\n  }\n\n  /**\n   * This function creates the view to the specified map\n   *\n   * @public\n   * @function\n   * @param {M.Map} map - Map to add the control\n   * @returns {HTMLElement} HTML template\n   * @api stable\n   */\n  createView(map) {\n    return M.template.compileSync(measureclearHTML, {\n      jsonp: true,\n      vars: {\n        translations: getValue('text'),\n      },\n    });\n  }\n\n  /**\n   * This function checks if an object is equals\n   * to this control\n   *\n   * @public\n   * @function\n   * @param {*} obj - Object to compare\n   * @returns {boolean} equals - Returns if they are equal or not\n   * @api stable\n   */\n  equals(obj) {\n    let equals = false;\n    if (obj instanceof MeasureClear) {\n      equals = (this.name === obj.name);\n    }\n    return equals;\n  }\n\n  /**\n   * This function destroys this plugin\n   *\n   * @public\n   * @function\n   * @api stable\n   */\n  destroy() {\n    this.getImpl().destroy();\n    this.impl = null;\n  }\n}\n/**\n * Name to identify this control\n * @const\n * @type {string}\n * @public\n * @api stable\n */\nMeasureClear.NAME = 'measurebar';\n\n/**\n * Template for this controls\n * @const\n * @type {string}\n * @public\n * @api stable\n */\nMeasureClear.TEMPLATE = 'measureclear.html';\n","/**\n * @module M/plugin/MeasureBar\n */\nimport MeasureLength from './measurelength';\nimport MeasureArea from './measurearea';\nimport MeasureClear from './measureclear';\nimport { getValue } from './i18n/language';\nimport '../assets/css/measurebar';\n\nexport default class MeasureBar extends M.Plugin {\n  /**\n   * @classdesc\n   * Main facade plugin object. This class creates a plugin\n   * object which has an implementation Object\n   *\n   * @constructor\n   * @extends {M.Plugin}\n   * @api stable\n   */\n  constructor(options = {}) {\n    super();\n\n    /**\n     * Facade of the map\n     * @private\n     * @type {M.Map}\n     */\n    this.map_ = null;\n\n    /**\n     * Array of controls\n     *\n     * @private\n     * @type {Array<M.Control>}\n     */\n    this.controls_ = [];\n\n\n    /**\n     * Position of plugin over map.\n     *\n     * @private\n     * @type {String} 'TL', 'TR', 'BR', 'BL'\n     */\n    this.position_ = options.position;\n\n\n    /**\n     * Control MeasureLength\n     * @private\n     * @type {M.control.MeasureLength}\n     */\n    this.measureLength_ = null;\n\n    /**\n     * Control MeasureArea\n     * @private\n     * @type {M.control.MeasureArea}\n     */\n    this.measureArea_ = null;\n\n    /**\n     * Control MeasureClear\n     * @private\n     * @type {M.control.MeasureClear}\n     */\n    this.measureClear_ = null;\n  }\n\n  /**\n   * @inheritdoc\n   * @public\n   * @function\n   * @param {M.Map} map - Map to add the plugin\n   * @api stable\n   */\n  addTo(map) {\n    this.map_ = map;\n\n    this.measureLength_ = new MeasureLength();\n    this.measureArea_ = new MeasureArea();\n    this.measureClear_ = new MeasureClear(this.measureLength_, this.measureArea_);\n\n    this.controls_.push(this.measureLength_, this.measureArea_, this.measureClear_);\n\n    this.panel_ = new M.ui.Panel('MeasureBar', {\n      collapsible: true,\n      position: M.ui.position[this.position_],\n      className: 'm-panel-measurebar',\n      collapsedButtonClass: 'measurebar-regla',\n      tooltip: getValue('text.tooltip'),\n    });\n\n    this.panel_.addControls(this.controls_);\n\n    this.map_.addPanels(this.panel_);\n  }\n\n  /**\n   * Name of the plugin\n   *\n   * @getter\n   * @function\n   */\n  get name() {\n    return 'measurebar';\n  }\n\n  /**\n   * Get the API REST Parameters of the plugin\n   *\n   * @function\n   * @public\n   * @api\n   */\n  getAPIRest() {\n    return `${this.name}=${this.position_}`;\n  }\n\n  /**\n   * This function destroys this plugin\n   *\n   * @public\n   * @function\n   * @api stable\n   */\n  destroy() {\n    this.map_.removeControls([this.measureLength_, this.measureArea_, this.measureClear_]);\n    this.map_ = null;\n    this.measureLength_ = null;\n    this.measureArea_ = null;\n    this.measureClear_ = null;\n  }\n\n  /**\n   * This function return the control of plugin\n   *\n   * @public\n   * @function\n   * @api stable\n   */\n  getControls() {\n    const aControls = [];\n    aControls.push(this.measureArea_, this.measureClear_, this.measureLength_);\n    return aControls;\n  }\n\n  /**\n   * This function compare if pluging recieved by param is instance of M.plugin.MeasureBar\n   *\n   * @public\n   * @function\n   * @param {M.plugin} plugin to comapre\n   * @api stable\n   */\n  equals(plugin) {\n    if (plugin instanceof MeasureBar) {\n      return true;\n    }\n    return false;\n  }\n}\n","import M$plugin$MeasureBar from './facade/js/measurebar';\n\nif (!window.M.plugin) window.M.plugin = {};\nwindow.M.plugin.MeasureBar = M$plugin$MeasureBar;\n"],"sourceRoot":""}