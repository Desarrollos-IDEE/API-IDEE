{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/templates/ignsearch.html","webpack:///./src/templates/results.html","webpack:///./src/facade/js/ignsearchcontrol.js","webpack:///./src/impl/ol/js/ignsearchcontrol.js","webpack:///./src/facade/js/helpers.js","webpack:///./src/facade/js/constants.js","webpack:///./src/facade/js/ignsearch.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","typingTimer","IGNSearchControl","M","impl","Control","map","html","_get","_getPrototypeOf","this","scale","resolution","units","DOTS_PER_INCH","facadeMap_","getMapImpl","getView","setResolution","coordinates","source","destiny","ol","proj","getTransform","transformFunc","registerHelpers","Handlebars","registerHelper","str","toUpperCase","v1","operator","v2","options","fn","inverse","type","address","id","municipality","line","concat","undefined","geographicNameType","_this","servicesToSearch","arguments","length","maxResults","noProcess","countryCode","urlCandidates","urlFind","urlReverse","urlPrefix","urlAssistant","urlDispatcher","resultVisibility","reverse","nomenclatorSearchType","ignsearchcontrol_classCallCheck","utils","isUndefined","IGNSearchImplControl","exception","ignsearchcontrol_possibleConstructorReturn","ignsearchcontrol_getPrototypeOf","resultVisibility_","reverseActivated","_this2","Promise","success","template","compileSync","resultsBox","querySelector","searchInput","addEventListener","clearResultsAndGeometry","e","createTimeout","clearTimeout","activateDeactivateReverse","document","clearResults","clickReverseEvent","on","evt","CLICK","showReverseTooltip","changePlaceholder","style","display","color","_this3","origin","getProjection","code","etrs89pointCoordinates","getImpl","reproject","coord","params","urlToGet","remote","then","res","text","returnData","JSON","parse","fullAddress","createFullAddress","mapCoordinates","dataCoordinates","showPopUp","_this4","setTimeout","searchInputValue","control","_this5","target","innerHTML","classList","add","fontSize","allCandidates","test","searchCoordinates","getNomenclatorData","getCandidatesData","compiledResult","results","vars","places","querySelectorAll","forEach","listElement","goToLocation","remove","appendChild","geoJsonData","removeLayers","clickedElementLayer","featureJSON","geometry","fixCoordinatesPath","properties","lat","lng","layer","GeoJSON","features","displayInLayerSwitcher","setStyle","simple","addLayers","zoomInLocation","perfectResult","state","showSearchPopUp","jsonResult","via","tip_via","portal","portalNumber","locationId","_this6","request","query","sourcename","outputformat","latLngString","location","resultTitle","title","latLngArray","split","latitude","parseFloat","longitude","newGeojson","point","inputValue","resultsArray","_this7","newInputVal","window","encodeURIComponent","resolve","substring","push","_this8","indexOf","thisElement","splice","elementsData","_this9","element","getAttribute","includes","parenthesisIndex","proxy","_this10","currentElement","selectedObject","findClickedItem","createGeometryStyles","getFindData","drawGeocoderResult","drawNomenclatorResult","service","_this11","resultsList","getElementById","calculateMaxExtent","extent","setBbox","setScale","fire","filter","feature","setOfCoordinates","removePopup","popup","flag","placeholder","Point","radius","icon","form","class","rotation","rotate","offset","opacity","Polygon","fill","exactResult","exitState","destinyProj","newCoordinates","featureCoordinates","featureTabOpts","content","myPopUp","Popup","addTab","addPopup","IGNSearch","ignsearch_classCallCheck","ignsearch_possibleConstructorReturn","ignsearch_getPrototypeOf","map_","controls_","isCollapsed","position","tooltip_","tooltip","reverse_","Plugin","panel_","ui","Panel","collapsible","collapsed","className","addControls","addPanels","setResultVisibility","plugin","M$plugin$IGNSearch","M$control$IGNSearchControl","M$impl$control$IGNSearchControl"],"mappings":"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","file":"ignsearch.ol.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = \"<div id=\\\"div-contenedor\\\" class=\\\"m-control m-container m-ignsearch\\\" title=\\\"\\\">\\n    <div class=\\\"search-panel\\\">\\n        <input type=\\\"text\\\" id=\\\"m-ignsearch-search-input\\\" class=\\\"m-input-search\\\" placeholder=\\\"Dirección, topónimo o Ref. catastral (14 dig.)\\\" />\\n        <button id=\\\"m-ignsearch-locate-button\\\" title=\\\"Obtener dirección en un punto del mapa\\\"><span class=\\\"g-cartografia-localizacion3\\\"></span></button>\\n        <button id=\\\"m-ignsearch-clear-button\\\" class=\\\"m-button-limpiar\\\" title=\\\"Borrar resultados de la búsqueda\\\"><span class=\\\"g-cartografia-papelera\\\"></span></button>\\n    </div>\\n    <div id=\\\"m-ignsearch-results\\\">\\n        <!-- Here goes the list of search results -->\\n    </div>\\n</div>\";","module.exports = \"<ul id=\\\"m-ignsearch-results-list\\\">\\n    {{#each places}}\\n        {{#if this.address}}\\n            {{#printType this.type this.address this.id this.municipality}}\\n            {{/printType}}\\n        {{else}}\\n            {{#printType this.type this.title this.id this.municipality}}\\n            {{/printType}}\\n        {{/if}}\\n    {{/each}}\\n</ul>\";","/**\n * @module M/control/IGNSearchControl\n */\nimport IGNSearchImplControl from 'impl/ignsearchcontrol';\nimport template from 'templates/ignsearch';\nimport results from 'templates/results';\nimport registerHelpers from './helpers';\nimport geographicNameType from './constants';\n\nlet typingTimer;\n\n/**\n * @classdesc\n * This class creates an input for searching locations on a map.\n * It uses Instituto Geográfico Nacional services Geocoder and Nomenclator\n * to search user's input location and return coordinates on click.\n */\nexport default class IGNSearchControl extends M.Control {\n  /*\n   * @constructor\n   * @extends {M.Control}\n   * @api\n   */\n  constructor(\n    servicesToSearch = 'gn',\n    maxResults = 10,\n    noProcess = 'municipio,poblacion',\n    countryCode = 'es',\n    urlCandidates,\n    urlFind,\n    urlReverse,\n    urlPrefix,\n    urlAssistant,\n    urlDispatcher,\n    resultVisibility = true,\n    reverse,\n    nomenclatorSearchType = geographicNameType,\n  ) {\n    if (M.utils.isUndefined(IGNSearchImplControl)) {\n      M.exception('La implementación usada no puede crear controles IGNSearchControl');\n    }\n    const impl = new IGNSearchImplControl();\n    super(impl, 'IGNSearch');\n\n    // Class properties\n\n    /**\n     * This variable indicates which services should be searched\n     * (geocoder, nomenclator or both)\n     * @private\n     * @type {string} - 'g' | 'n' | 'gn'\n     */\n    this.servicesToSearch = servicesToSearch;\n\n    /**\n     * This variable sets the maximun results returned by a service\n     * (if both services are searched the maximum results will be twice this number)\n     * @private\n     * @type {number}\n     */\n    this.maxResults = maxResults;\n\n    /**\n     * This variables indicates which entities shouldn't be searched\n     * @private\n     * @type {string} - 'municipio' | 'poblacion' | 'toponimo' | 'municipio,poblacion' | etc\n     */\n    this.noProcess = noProcess;\n\n    /**\n     * This variable indicates the country code.\n     * @private\n     * @type {string} - 'es'\n     */\n    this.countryCode = countryCode;\n\n    /**\n     * This variable indicates Geocoder Candidates service url\n     * @private\n     * @type {string}\n     */\n    this.urlCandidates = urlCandidates;\n\n    /**\n     * This variable indicates Geocoder Find service url\n     * @private\n     * @type {string}\n     */\n    this.urlFind = urlFind;\n\n    /**\n     * This variable indicates Geocoder Reverse service url\n     * @private\n     * @type {string}\n     */\n    this.urlReverse = urlReverse;\n\n    /**\n     * This variable indicates Nomenclator url prefix\n     * @private\n     * @type {string}\n     */\n    this.urlPrefix = urlPrefix;\n\n    /**\n     * This variable indicates Nomenclator SearchAssistant service url\n     * @private\n     * @type {string}\n     */\n    this.urlAssistant = urlAssistant;\n\n    /**\n     * This variable indicates Nomenclator Dispatcher service url\n     * @private\n     * @type {string}\n     */\n    this.urlDispatcher = urlDispatcher;\n\n    /**\n     * This variable indicates whether result geometry should be drawn on map.\n     * @private\n     * @type {boolean}\n     */\n    this.resultVisibility_ = resultVisibility;\n\n    /**\n     * This variable indicates which entity types should be searched on Nomenclator service.\n     * @private\n     * @type {Array<string>}\n     */\n    this.nomenclatorSearchType = nomenclatorSearchType;\n\n    /**\n     * This variable indicates whether reverse geocoder button should be available.\n     * @private\n     * @type {Boolean}\n     */\n    this.reverse = reverse;\n\n    /**\n     * This variable indicates whether reverse geocoder button is activated.\n     * @private\n     * @type {Boolean}\n     */\n    this.reverseActivated = false;\n\n    registerHelpers();\n  }\n\n  /**\n   * This function creates the view\n   *\n   * @public\n   * @function\n   * @param {M.Map} map to add the control\n   * @api\n   */\n  createView(map) {\n    this.map = map;\n\n    return new Promise((success) => {\n      const html = M.template.compileSync(template);\n      this.html = html;\n      this.resultsBox = html.querySelector('#m-ignsearch-results');\n      this.searchInput = this.html.querySelector('#m-ignsearch-search-input');\n      html.querySelector('#m-ignsearch-clear-button').addEventListener('click', this.clearResultsAndGeometry.bind(this));\n      html.querySelector('#m-ignsearch-search-input').addEventListener('keyup', e => this.createTimeout(e));\n      html.querySelector('#m-ignsearch-search-input').addEventListener('keydown', () => {\n        clearTimeout(typingTimer);\n      });\n      html.querySelector('#m-ignsearch-locate-button').addEventListener('click', this.activateDeactivateReverse.bind(this));\n      document.querySelector('.ign-search-panel>.m-panel-btn').addEventListener('click', this.clearResults.bind(this));\n      this.clickReverseEvent = this.map.on(M.evt.CLICK, e => this.showReverseTooltip(e));\n\n      this.changePlaceholder();\n      if (!this.reverse) {\n        html.querySelector('#m-ignsearch-locate-button').style.display = 'none';\n      }\n\n      success(html);\n    });\n  }\n\n  /**\n   * This function toggles reverse geocoder button activation.\n   *\n   * @public\n   * @function\n   * @api\n   *\n   */\n  activateDeactivateReverse() {\n    if (!this.reverseActivated) {\n      this.reverseActivated = true;\n      document.querySelector('#m-ignsearch-locate-button span').style.color = '#71a7d3';\n    } else {\n      this.reverseActivated = false;\n      document.querySelector('#m-ignsearch-locate-button span').style.color = '#7A7A73';\n    }\n  }\n\n  /**\n   * This function shows information tooltip on clicked point.\n   * @param {Event} e - Event\n   */\n  showReverseTooltip(e) {\n    if (this.reverseActivated) {\n      // Reproject coordinates to ETRS89 on decimal grades (+ North latitude and East longitude)\n      const origin = this.map.getProjection().code;\n      const destiny = 'EPSG:4258';\n      const etrs89pointCoordinates = this.getImpl()\n        .reproject([e.coord[0], e.coord[1]], origin, destiny);\n      // Params:\n      // lon, lat\n      // type (only if refcatastral) = 'refcatastral'\n      const params = `lon=${etrs89pointCoordinates[0]}&lat=${etrs89pointCoordinates[1]}`;\n      const urlToGet = `${this.urlReverse}?${params}`;\n      M.remote.get(urlToGet).then((res) => {\n        if (res.text !== null) {\n          const returnData = JSON.parse(res.text);\n          const fullAddress = this.createFullAddress(returnData);\n          const mapCoordinates = e.coord;\n          const dataCoordinates = [etrs89pointCoordinates[1], etrs89pointCoordinates[0]];\n          this.showPopUp(fullAddress, mapCoordinates, dataCoordinates);\n        }\n      });\n    }\n  }\n\n  /**\n   * This function sets a timeout between keypress and search.\n   * @public\n   * @function\n   * @param {e} event that triggers the method\n   * @api\n   */\n  createTimeout(e) {\n    clearTimeout(typingTimer);\n    typingTimer = setTimeout(() => this.searchInputValue(e), 500);\n  }\n\n  /**\n   * This function gets activation button\n   *\n   * @public\n   * @function\n   * @param {HTML} html of control\n   * @api\n   */\n  getActivationButton(html) {\n    return html.querySelector('.m-ignsearch button');\n  }\n\n  /**\n   * This function compares controls\n   *\n   * @public\n   * @function\n   * @param {M.Control} control to compare\n   * @api\n   */\n  equals(control) {\n    return control instanceof IGNSearchControl;\n  }\n\n\n  /**\n   * This function\n   * 1.- Takes user's input\n   * 2.- Searches for ocurrences on IGN sources\n   * 3.- Returns results as items in a drop-down list (returns address)\n   * 4.- Onclick on an item goes to its coordinates\n   * @public\n   * @function\n   * @param {event} e - event that triggers this method\n   * @api\n   */\n  searchInputValue(e) {\n    const { value } = e.target;\n    if (value.length <= 2) {\n      this.resultsBox.innerHTML = '';\n    } else {\n      this.resultsBox.innerHTML = '';\n      // Adds animation class during loading\n      this.resultsBox.classList.add('g-cartografia-spinner');\n      this.resultsBox.style.fontSize = '24px';\n      this.allCandidates = [];\n      const regExpCoord = /[+-]?\\d+\\.\\d+(\\s|,|(,\\s))[+-]?\\d+\\.\\d+/;\n      // Checks if input content represents coordinates, else searches text\n      if (regExpCoord.test(value)) {\n        // searches coordinates point (TO DO) if coordinates are entered\n        this.searchCoordinates(value);\n      } else {\n        // saves on allCandidates search results from Nomenclator (CommunicationPoolservlet)\n        this.getNomenclatorData(value, this.allCandidates).then(() => {\n          // saves on allCandidates search results from CartoCiudad (geocoder)\n          this.getCandidatesData(value, this.allCandidates).then(() => {\n            // Clears previous search\n            this.resultsBox.innerHTML = '';\n\n            const compiledResult = M.template.compileSync(results, {\n              vars: {\n                places: this.allCandidates,\n              },\n            });\n\n            compiledResult.querySelectorAll('li').forEach((listElement) => {\n              listElement.addEventListener('click', () => {\n                this.goToLocation(listElement);\n              });\n            });\n            // remove animation class and return to normal font size after loading\n            this.resultsBox.classList.remove('g-cartografia-spinner');\n            this.resultsBox.style.fontSize = '1em';\n            this.resultsBox.appendChild(compiledResult);\n          });\n        });\n      }\n    }\n  }\n\n  /**\n   * This function removes last search layer and adds new layer with current result (from geocoder)\n   * features to map, zooms in result, edits popup information and shows a message saying\n   *  if it's a perfect result or an approximation.\n   * @public\n   * @function\n   * @param {Object} geoJsonData - clicked result object\n   * @api\n   */\n  drawGeocoderResult(geoJsonData) {\n    this.map.removeLayers(this.clickedElementLayer);\n    const featureJSON = JSON.parse(geoJsonData);\n    featureJSON.geometry.coordinates = this.fixCoordinatesPath(featureJSON);\n    // Center coordinates\n    this.coordinates = `${featureJSON.properties.lat}, ${featureJSON.properties.lng}`;\n    // New layer with geometry\n    this.clickedElementLayer = new M.layer.GeoJSON({\n      name: 'Resultado búsquedas',\n      source: {\n        type: 'FeatureCollection',\n        features: [featureJSON],\n      },\n    });\n    this.clickedElementLayer.displayInLayerSwitcher = false;\n    // Stops showing polygon geometry\n    if (!this.resultVisibility_) {\n      this.clickedElementLayer.setStyle(this.simple);\n    }\n\n    this.map.addLayers(this.clickedElementLayer);\n\n    this.zoomInLocation('g', featureJSON.geometry.type);\n\n    // show popup for streets\n    if (featureJSON.properties.type === 'callejero' || featureJSON.properties.type === 'portal') {\n      // this line substitutes temporarily the following piece of code\n      const fullAddress = this.createFullAddress(featureJSON.properties);\n      // const via = (featureJSON.properties.tip_via === null ||\n      //   featureJSON.properties.tip_via === undefined) ? '' : featureJSON.properties.tip_via;\n      // const address = (featureJSON.properties.address === null ||\n      //   featureJSON.properties.address === undefined) ? '' : featureJSON.properties.address;\n      // const portal = (featureJSON.properties.portalNumber === null ||\n      //   featureJSON.properties.portalNumber === undefined ||\n      //   featureJSON.properties.portalNumber === 0) ? '' : featureJSON.properties.portalNumber;\n      // const fullAddress = `${via} ${address} ${portal}`;\n      const coordinates = [featureJSON.properties.lat, featureJSON.properties.lng];\n      const perfectResult = featureJSON.properties.state;\n\n      this.showSearchPopUp(fullAddress, coordinates, perfectResult);\n    }\n  }\n\n  /**\n   * This function takes data from an entity and returns the complete address\n   * @param {string} jsonResult - json string with entity data\n   */\n  createFullAddress(jsonResult) {\n    const via = (jsonResult.tip_via === null ||\n      jsonResult.tip_via === undefined) ? '' : jsonResult.tip_via;\n    const address = (jsonResult.address === null ||\n      jsonResult.address === undefined) ? '' : jsonResult.address;\n    const portal = (jsonResult.portalNumber === null ||\n      jsonResult.portalNumber === undefined ||\n      jsonResult.portalNumber === 0) ? '' : jsonResult.portalNumber;\n    return `${via} ${address} ${portal}`;\n  }\n\n  /**\n   * This function removes last search layer and adds new layer\n   * with current result (from nomenclator) features to map and zooms in result.\n   * @public\n   * @function\n   * @param {string} locationId - id of the location object\n   * @api\n   */\n  drawNomenclatorResult(locationId) {\n    M.remote.get(this.urlDispatcher, {\n      request: 'OpenQuerySource',\n      query: `<ogc:Filter><ogc:FeatureId fid=\"${locationId}\"/></ogc:Filter>`,\n      sourcename: `${this.urlPrefix}communicationsPoolServlet/sourceAccessWFS-INSPIRE-NGBE.rdf`,\n      outputformat: 'application/json',\n    }).then((res) => {\n      const latLngString = JSON.parse(res.text).results[0].location;\n      const resultTitle = JSON.parse(res.text).results[0].title;\n      const latLngArray = latLngString.split(' ');\n      const latitude = parseFloat(latLngArray[0]);\n      const longitude = parseFloat(latLngArray[1]);\n      this.map.removeLayers(this.clickedElementLayer);\n      const newGeojson = {\n        name: 'Resultado búsquedas',\n        source: {\n          type: 'FeatureCollection',\n          features: [{\n            type: 'Feature',\n            geometry: {\n              type: 'Point',\n              coordinates: [\n                longitude, latitude,\n              ],\n            },\n            properties: {\n              name: resultTitle,\n            },\n          }],\n        },\n      };\n      this.clickedElementLayer = new M.layer.GeoJSON(newGeojson);\n      this.clickedElementLayer.displayInLayerSwitcher = false;\n      this.clickedElementLayer.setStyle(this.point);\n\n      // Stops showing polygon geometry\n      if (!this.resultVisibility_) {\n        this.clickedElementLayer.setStyle(this.simple);\n      }\n\n      this.map.addLayers(this.clickedElementLayer);\n\n      this.zoomInLocation('n', 'Point');\n    });\n  }\n\n  /**\n   * This function gets user input, searches for coincidences and adds each one to the given array.\n   * @public\n   * @function\n   * @param {string} inputValue search text written by user\n   * @param { Array < Object > } resultsArray search result candidates from IGN services\n   * @api\n   */\n  getCandidatesData(inputValue, resultsArray) {\n    const newInputVal = window.encodeURIComponent(inputValue);\n    return new Promise((resolve) => {\n      if (this.servicesToSearch !== 'n') {\n        let params = `q=${newInputVal}&limit=${this.maxResults}&no_process=${this.noProcess}`;\n        params += `&countrycode=${this.countryCode}&autocancel='true'`;\n        const urlToGet = `${this.urlCandidates}?${params}`;\n        M.remote.get(urlToGet).then((res) => {\n          const returnData = JSON.parse(res.text.substring(9, res.text.length - 1));\n          for (let i = 0; i < returnData.length; i += 1) {\n            resultsArray.push(returnData[i]);\n          }\n          resolve();\n        });\n      } else {\n        resolve();\n      }\n    });\n  }\n\n  /**\n   * This function adds search coincidences on Nomenclator to array\n   * @public\n   * @function\n   * @param {string} inputValue location searched by user\n   * @param {Array <Object>} resultsArray search results\n   * @api\n   */\n  getNomenclatorData(inputValue, resultsArray) {\n    const newInputVal = window.encodeURIComponent(inputValue);\n    return new Promise((resolve) => {\n      if (this.servicesToSearch !== 'g') {\n        const params = `maxresults=${this.maxResults}&name_equals=${newInputVal}`;\n        const urlToGet = `${this.urlAssistant}?${params}`;\n        M.remote.get(urlToGet).then((res) => {\n          const temporalData = res.text !== '' ? JSON.parse(res.text) : { results: [] };\n          const returnData = temporalData.results;\n          for (let i = 0; i < returnData.length; i += 1) {\n            // avoid nameplaces not included in this.nomenclatorSearchType\n            if (this.nomenclatorSearchType.indexOf(returnData[i].type) >= 0) {\n              resultsArray.push(returnData[i]);\n            }\n          }\n          // move 'Núcleos de población' to start\n          for (let i = 0; i < resultsArray.length; i += 1) {\n            if (resultsArray[i].type === 'Núcleos de población') {\n              const thisElement = resultsArray.splice(i, 1);\n              resultsArray.splice(0, 0, thisElement);\n            }\n          }\n          resolve();\n        });\n      } else {\n        resolve();\n      }\n    });\n  }\n\n  /**\n   * This function gets address of selected item and returns geojson data (with coordinates)\n   * Only for Geocoder service\n   * @public\n   * @function\n   * @param {string} listElement element from drop-down list(\"li\")\n   * @param {Array <Object> } elementsData search results\n   * @api\n   */\n  getFindData(listElement, elementsData) {\n    return new Promise((resolve) => {\n      let id;\n      let type;\n      let portal;\n      let via;\n      let address;\n      elementsData.forEach((element) => {\n        if (listElement.getAttribute('id') === element.id) {\n          id = `&id=${element.id}`;\n          type = `&type=${element.type}`;\n          portal = (element.portalNumber !== 0 && element.portalNumber !== undefined) ?\n            `&portal=${element.portalNumber}` : '';\n          via = element.tip_via !== '' ? `&tip_via=${element.tip_via}` : '';\n        }\n      });\n      if (listElement.innerHTML.includes('(')) {\n        const parenthesisIndex = listElement.innerHTML.indexOf('(');\n        address = listElement.innerHTML.substring(0, parenthesisIndex);\n      }\n      const params = `${type}${via}${id}${portal}&outputformat=geojson`;\n      const urlToGet = `${this.urlFind}?q=${address}${params}`;\n      M.proxy(false);\n      M.remote.get(urlToGet).then((res) => {\n        const geoJsonData = res.text.substring(9, res.text.length - 1);\n        resolve(geoJsonData);\n      });\n      M.proxy(true);\n    });\n  }\n\n  /**\n   * This function zooms in clicked location and draws geometry\n   * @public\n   * @function\n   * @param {Object} listElement clicked result information\n   * @api\n   */\n  goToLocation(listElement) {\n    this.currentElement = listElement; // <li>\n    const selectedObject = this.findClickedItem(listElement, this.allCandidates); // json\n    this.createGeometryStyles();\n    // if item comes from geocoder\n    if (Object.prototype.hasOwnProperty.call(selectedObject, 'address')) {\n      this.getFindData(listElement, this.allCandidates).then((geoJsonData) => {\n        this.drawGeocoderResult(geoJsonData);\n      });\n    } else { // if item comes from nomenclator\n      this.drawNomenclatorResult(selectedObject.id);\n    }\n  }\n\n  /**\n   * This function zooms in MaxExtent of clicked element\n   * @public\n   * @function\n   * @param {string} service { 'g' | 'n' }\n   * @param { string } type of geometry in which we zoom\n   * @api\n   */\n  zoomInLocation(service, type) {\n    this.resultsList = document.getElementById('m-ignsearch-results-list');\n    this.clickedElementLayer.calculateMaxExtent().then((extent) => {\n      this.map.setBbox(extent);\n      if (service === 'n' || type === 'Point') {\n        this.setScale(2000);\n      }\n      this.resultsList.innerHTML = '';\n      this.searchInput.value = '';\n      this.searchInput.value = this.currentElement.innerHTML;\n      this.resultsList.appendChild(this.currentElement);\n\n      // Fires ignsearch:EntityFound event after zoom-in result\n      this.fire('ignsearch:entityFound', [extent]);\n    });\n  }\n\n  /**\n   * This function returns clicked location object\n   * @public\n   * @function\n   * @param { string } listElement <li>Location</li>\n   * @param { Array < Object > } allCandidates possible locations\n   * @api\n   */\n  findClickedItem(listElement, allCandidates) {\n    return allCandidates.filter(element => element.id === listElement.getAttribute('id'))[0];\n  }\n\n  /**\n   * This function fixes path to get to this feature's coordinates\n   * @public\n   * @function\n   * @param {feature} feature with geometry information for the given location\n   * @api\n   */\n  fixCoordinatesPath(feature) {\n    let coordinates;\n    if (feature.geometry.type === 'Point') {\n      coordinates = feature.geometry.coordinates[0][0];\n    } else if (feature.geometry.type === 'LineString') {\n      coordinates = feature.geometry.coordinates[0];\n    } else {\n      coordinates = feature.geometry.coordinates;\n    }\n    return coordinates;\n  }\n\n  /* Given a set of coordinates (lat, long),\n    searches for the corresponding place\n  */\n  searchCoordinates(setOfCoordinates) {\n    // const latLongSeparationRegExp = /(\\s+|,|,\\s)/;\n    // setOfCoordinates.replace(latLongSeparationRegExp, ' ');\n    // const latFromSet = setOfCoordinates.split(' ')[0];\n    // const longFromSet = setOfCoordinates.split(' ')[1];\n\n    return new Promise((resolve) => {\n      // TODO\n      // if lat,long separation character/s are not a space, it turns into a space\n      // const latLongSeparationRegExp = /(\\s+|,|,\\s)/;\n      // setOfCoordinates.replace(latLongSeparationRegExp, ' ');\n      // const latFromSet = setOfCoordinates.split(' ')[0];\n      // const longFromSet = setOfCoordinates.split(' ')[1];\n\n\n      // // geocoder service\n      // const urlToGet = `${this.urlReverse}?lat=${latFromSet}&lon=${longFromSet}`;\n      // M.remote.get(urlToGet).then((res) => {\n      //   const parsedResponse = JSON.parse(res.text);\n      //   const coordinatesSetAddress = parsedResponse.address;\n      //   resolve();\n      // });\n      resolve();\n    });\n  }\n\n  /**\n   * This function clears drawn geometry from map.\n   * @public\n   * @function\n   * @api\n   */\n  clearResults() {\n    this.searchInput.value = '';\n    this.resultsBox.innerHTML = '';\n  }\n\n  /**\n   * This function clears input content, results box, popup and shown geometry.\n   * @public\n   * @function\n   * @api\n   */\n  clearResultsAndGeometry() {\n    this.clearResults();\n    if (this.clickedElementLayer !== undefined) {\n      this.clickedElementLayer.setStyle(this.simple);\n    }\n    this.map.removePopup(this.popup, [\n      this.lng,\n      this.lat,\n    ]);\n  }\n\n  /**\n   * This function sets geometry visibility on map (visible|invisible).\n   * @public\n   * @function\n   * @param {boolean} flag\n   * @api\n   */\n  setResultVisibility(flag) {\n    this.resultVisibility_ = flag;\n  }\n\n  /**\n   * This function changes input placeholder based on services choice\n   * @public\n   * @function\n   * @api\n   */\n  changePlaceholder() {\n    if (this.servicesToSearch === 'g') {\n      this.searchInput.placeholder = 'Dirección o Ref. catastral (14 díg.) ';\n    } else if (this.servicesToSearch === 'n') {\n      this.searchInput.placeholder = 'Topónimo';\n    }\n  }\n\n  /**\n   * This function creates some geometry styles.\n   * @public\n   * @function\n   * @api\n   */\n  createGeometryStyles() {\n    // Shows pin on drawn point\n    this.point = new M.style.Point({\n      radius: 5,\n      icon: {\n        form: 'none',\n        class: 'g-cartografia-pin',\n        radius: 12,\n        rotation: 0,\n        rotate: false,\n        offset: [0, -12],\n        color: '#f00',\n        opacity: 1,\n      },\n    });\n\n    // Style for hiding geometry\n    this.simple = new M.style.Polygon({\n      fill: {\n        color: 'black',\n        opacity: 0,\n      },\n    });\n  }\n\n  /**\n    * This\n    function inserts a popUp with information about the searched location\n      (and whether it 's an exact result or an approximation)\n    * @param { string } fullAddress location address(street, portal, etc.)\n    * @param { Array } coordinates latitude[0] and longitude[1] coordinates\n    * @param { boolean } exactResult indicating\n    if the given result is a perfect match\n    */\n  showSearchPopUp(fullAddress, coordinates, exactResult) {\n    const destinyProj = this.map.getProjection().code;\n    const destinySource = 'EPSG:4326';\n\n    const newCoordinates = this.getImpl()\n      .reproject([coordinates[1], coordinates[0]], destinySource, destinyProj);\n\n    let exitState;\n\n    if (exactResult !== 1) {\n      exitState = 'Dirección aproximada';\n    } else {\n      exitState = 'Dirección exacta';\n    }\n\n    this.showPopUp(fullAddress, newCoordinates, coordinates, exitState);\n  }\n\n  /**\n   * This function inserts a popup on the map with information about its location.\n   * @param { string } fullAddress location address(street, portal, etc.)\n   * @param { Array } mapCoordinates latitude[0] and longitude[1] coordinates on map projection\n   * @param { Array } featureCoordinates latitude[0] and longitude[1] coordinates from feature\n   * @param { string } exitState indicating if the given result is a perfect match\n   */\n  showPopUp(fullAddress, mapCoordinates, featureCoordinates, exitState = null) {\n    const featureTabOpts = { content: '' };\n\n    if (exitState !== null) {\n      featureTabOpts.content += `<div><b>${exitState}</b></div>`;\n    }\n\n    featureTabOpts.content += `<div>${fullAddress}</div>\n                <div class='ignsearch-popup'>Lat: ${featureCoordinates[0]}</div>\n                <div class='ignsearch-popup'> Long: ${featureCoordinates[1]} </div>`;\n\n    const myPopUp = new M.Popup();\n    myPopUp.addTab(featureTabOpts);\n    this.map.addPopup(myPopUp, [\n      mapCoordinates[0],\n      mapCoordinates[1],\n    ]);\n    this.popup = myPopUp;\n    this.lat = mapCoordinates[1];\n    this.lng = mapCoordinates[0];\n  }\n\n  /**\n   * This function sets given scale to map\n   * @public\n   * @function\n   * @param { number } scale to which the map will zoom in\n   *   (5000 if we want 1: 5000)\n   * @api\n   */\n  setScale(scale) {\n    this.getImpl().setScale(scale);\n  }\n}\n","/**\n * @module M/impl/control/IGNSearchControl\n */\nexport default class IGNSearchControl extends M.impl.Control {\n  /**\n   * This function adds the control to the specified map\n   *\n   * @public\n   * @function\n   * @param {M.Map} map to add the plugin\n   * @param {HTMLElement} html of the plugin\n   * @api stable\n   */\n  addTo(map, html) {\n    super.addTo(map, html);\n  }\n\n  /**\n   * This function sets a new scale to the map.\n   * @private\n   * @function\n   */\n  setScale(scale) {\n    const dpiToCM = M.units.DOTS_PER_INCH / 2.54;\n    const resolution = (scale / dpiToCM) / 100;\n    const olMap = this.facadeMap_.getMapImpl();\n    const olView = olMap.getView();\n    olView.setResolution(resolution);\n  }\n\n  /**\n   * This function reprojects given coordinates to given projection.\n   * @private\n   * @function\n   * @param { Array <number> } coordinates - [x,y]\n   * @param { string } source - 'EPSG:4326'\n   * @param { string } destiny - 'EPSG:4326'\n   */\n  reproject(coordinates, source, destiny) {\n    const transformFunc = ol.proj.getTransform(source, destiny);\n    return transformFunc(coordinates);\n  }\n}\n","const registerHelpers = () => {\n  Handlebars.registerHelper('toUpperCase', (str) => {\n    return str.toUpperCase();\n  });\n\n  Handlebars.registerHelper('ifCond', (v1, operator, v2, options) => {\n    switch (operator) {\n      case '===':\n        return (v1 === v2) ? options.fn(this) : options.inverse(this);\n      case '!==':\n        return (v1 !== v2) ? options.fn(this) : options.inverse(this);\n      case '<':\n        return (v1 < v2) ? options.fn(this) : options.inverse(this);\n      case '<=':\n        return (v1 <= v2) ? options.fn(this) : options.inverse(this);\n      case '>':\n        return (v1 > v2) ? options.fn(this) : options.inverse(this);\n      case '>=':\n        return (v1 >= v2) ? options.fn(this) : options.inverse(this);\n      case '&&':\n        return (v1 && v2) ? options.fn(this) : options.inverse(this);\n      case '||':\n        return (v1 || v2) ? options.fn(this) : options.inverse(this);\n      default:\n        return options.inverse(this);\n    }\n  });\n\n  Handlebars.registerHelper('printType', (type, address, id, municipality) => {\n    let line = `<li id=${id}> ${address.toUpperCase()}`;\n    // add following lines if asked to show entity type again\n    // (but not if type's portal, callejero or Codpost)\n    // if (type !== 'callejero' && type !== 'portal' && type !== 'Codpost') {\n    //   line += ` (${type.toUpperCase()})`;\n    // }\n    if (municipality !== undefined) {\n      line += ` en ${municipality}`;\n    }\n    return line;\n  });\n};\n\nexport default registerHelpers;\n","const geographicNameType = ['Estado',\n  'Comunidad autónoma',\n  'Ciudad con estatuto de autonomía',\n  'Provincia',\n  'Municipio',\n  'poblacion',\n  'EATIM',\n  'Isla administrativa',\n  'Comarca administrativa',\n  'Jurisdicción',\n  // 'Capital de Estado',\n  // 'Capital de comunidad autónoma y ciudad con estatuto de autonomía',\n  // 'Capital de provincia',\n  'Capital de municipio',\n  'Capital de EATIM',\n  'Núcleos de población',\n  'Entidad colectiva',\n  'Entidad menor de población',\n  'Distrito municipal',\n  // 'Barrio',\n  'Entidad singular',\n  'Construcción/instalación abierta',\n  'Edificación',\n  // 'callejero',\n  'Vértice Geodésico',\n  'Hitos de demarcación territorial',\n  'Hitos en vías de comunicación',\n  'Alineación montañosa',\n  'Montaña',\n  'Paso de montaña',\n  'Llanura',\n  'Depresión',\n  'Vertientes',\n  'Comarca geográfica',\n  'Paraje',\n  'Elemento puntual del paisaje',\n  'Saliente costero',\n  'Playa',\n  'Isla',\n  'Otro relieve costero',\n  'Parque Nacional y Natural',\n  'Espacio protegido restante',\n  'Aeropuerto',\n  'Aeródromo',\n  'Pista de aviación y helipuerto',\n  'Puerto de Estado',\n  'Instalación portuaria',\n  // 'Carretera',\n  'Camino y vía pecuaria',\n  // 'Vía urbana',\n  'Ferrocarril',\n  'Curso natural de agua',\n  'Masa de agua',\n  'Curso artificial de agua',\n  'Embalse',\n  'Hidrónimo puntual',\n  'Glaciares',\n  'Mar',\n  'Entrante costero y estrecho marítimo',\n  'Relieve submarino',\n];\n\nexport default geographicNameType;\n","/**\n * @module M/plugin/IGNSearch\n */\nimport 'assets/css/ignsearch';\nimport IGNSearchControl from './ignsearchcontrol';\n\nexport default class IGNSearch extends M.Plugin {\n  /**\n   * @classdesc\n   * Main facade plugin object. This class creates a plugin\n   * object which has an implementation Object\n   *\n   * @constructor\n   * @extends {M.Plugin}\n   * @param {Object} impl implementation object\n   * @api\n   */\n  constructor(options) {\n    super();\n    /**\n     * Facade of the map\n     * @private\n     * @type {M.Map}\n     */\n    this.map_ = null;\n\n    /**\n     * Array of controls\n     * @private\n     * @type {Array<M.Control>}\n     */\n    this.controls_ = [];\n\n    /**\n     * This variable indicates which services should be searched\n     * (geocoder, nomenclator or both)\n     * @private\n     * @type {string} - 'g' | 'n' | 'gn'\n     */\n    this.servicesToSearch = options.servicesToSearch || 'gn';\n\n    /**\n     * This variable sets the maximun results returned by a service\n     * (if both services are searched the maximum results will be twice this number)\n     * @private\n     * @type {number}\n     */\n    this.maxResults = options.maxResults || 10;\n\n    /**\n     * This variables indicates which entities shouldn't be searched\n     * @private\n     * @type {string} - 'municipio' | 'poblacion' | 'toponimo' | 'municipio,poblacion' | etc\n     */\n    this.noProcess = options.noProcess || 'municipio,poblacion';\n\n    /**\n     * This variable indicates the country code.\n     * @private\n     * @type {string} - 'es'\n     */\n    this.countryCode = options.countryCode || 'es';\n\n    /**\n     * This variable indicates Geocoder Candidates service url\n     * @private\n     * @type {string}\n     */\n    this.urlCandidates = options.urlCandidates || 'https://www.cartociudad.es/geocoder/api/geocoder/candidatesJsonp';\n\n    /**\n     * This variable indicates Geocoder Find service url\n     * @private\n     * @type {string}\n     */\n    this.urlFind = options.urlFind || 'https://www.cartociudad.es/geocoder/api/geocoder/findJsonp';\n\n    /**\n     * This variable indicates Geocoder Reverse service url\n     * @private\n     * @type {string}\n     */\n    this.urlReverse = options.urlReverse || 'https://www.cartociudad.es/geocoder/api/geocoder/reverseGeocode';\n\n    /**\n     * This variable indicates Nomenclator url prefix\n     * @private\n     * @type {string}\n     */\n    this.urlPrefix = options.urlPrefix || 'http://www.idee.es/';\n\n    /**\n     * This variable indicates Nomenclator SearchAssistant service url\n     * @private\n     * @type {string}\n     */\n    this.urlAssistant = options.urlAssistant || 'https://www.idee.es/communicationsPoolServlet/SearchAssistant';\n\n    /**\n     * This variable indicates Nomenclator Dispatcher service url\n     * @private\n     * @type {string}\n     */\n    this.urlDispatcher = options.urlDispatcher || 'https://www.idee.es/communicationsPoolServlet/Dispatcher';\n\n    /**\n     * This variable indicates which entity types should be searched on Nomenclator service.\n     * @private\n     * @type {Array<string>}\n     */\n    this.nomenclatorSearchType = options.nomenclatorSearchType;\n\n    /**\n     * This variable indicates whether result geometry should be drawn on map.\n     * @private\n     * @type {boolean}\n     */\n    this.resultVisibility = options.resultVisibility || true;\n\n    /**\n     * This variable indicates whether the plugin can be collapsed.\n     * @private\n     * @type {boolean}\n     */\n    this.isCollapsed = options.isCollapsed || false;\n\n    /**\n     * This variable indicates plugin's position on window\n     * @private\n     * @type {string} { 'TL' | 'TR' | 'BL' | 'BR' } (corners)\n     */\n    this.position = options.position || 'TL';\n\n    /**\n     * @private\n     * @type {string} - tooltip on hover on plugin button\n     */\n    this.tooltip_ = options.tooltip || 'Búsqueda de lugares';\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.reverse_ = options.reverse || false;\n  }\n\n  /**\n   * This function adds this plugin into the map\n   *\n   * @public\n   * @function\n   * @param {M.Map} map the map to add the plugin\n   * @api\n   */\n  addTo(map) {\n    this.controls_.push(new IGNSearchControl(\n      this.servicesToSearch,\n      this.maxResults,\n      this.noProcess,\n      this.countryCode,\n      this.urlCandidates,\n      this.urlFind,\n      this.urlReverse,\n      this.urlPrefix,\n      this.urlAssistant,\n      this.urlDispatcher,\n      this.resultVisibility,\n      this.reverse_,\n    ));\n    this.controls_[0].on('ignsearch:entityFound', (extent) => {\n      this.fire('ignsearch:entityFound', [extent]);\n    });\n    this.map_ = map;\n    this.panel_ = new M.ui.Panel('panelIGNSearch', {\n      collapsible: true,\n      position: M.ui.position[this.position],\n      collapsed: this.isCollapsed,\n      className: 'ign-search-panel',\n      tooltip: this.tooltip_,\n    });\n    this.panel_.addControls(this.controls_);\n    map.addPanels(this.panel_);\n  }\n\n  /**\n   * This function sets geometry visibility on map (visible|invisible).\n   * @public\n   * @function\n   * @param {boolean} flag\n   * @api\n   */\n  setResultVisibility(flag) {\n    this.controls_[0].setResultVisibility(flag);\n  }\n}\n","import M$plugin$IGNSearch from './/facade/js/ignsearch';\nimport M$control$IGNSearchControl from './/facade/js/ignsearchcontrol';\nimport M$impl$control$IGNSearchControl from './/impl/ol/js/ignsearchcontrol';\n\nif (!window.M.plugin) window.M.plugin = {};\nif (!window.M.control) window.M.control = {};\nif (!window.M.impl) window.M.impl = {};\nif (!window.M.impl.control) window.M.impl.control = {};\nwindow.M.plugin.IGNSearch = M$plugin$IGNSearch;\nwindow.M.control.IGNSearchControl = M$control$IGNSearchControl;\nwindow.M.impl.control.IGNSearchControl = M$impl$control$IGNSearchControl;\n"],"sourceRoot":""}